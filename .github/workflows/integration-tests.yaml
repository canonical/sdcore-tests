name: Integration test

on:
  workflow_call:
    inputs:
      branch-name:
        description: Name of the branch to checkout
        required: false
        type: string
        default: ${{ github.ref }}

jobs:
  integration-test:
    runs-on: [self-hosted, linux, X64, xlarge, jammy]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch-name }}

      - name: Install Terraform
        run: sudo snap install terraform --classic

      - name: Install Canonical K8S
        run: |
          sudo snap install k8s --classic --channel=1.33-classic/stable
          cat << EOF | sudo k8s bootstrap --file -
          containerd-base-dir: /opt/containerd
          cluster-config:
            annotations:
              k8sd/v1alpha1/cilium/sctp/enabled: true
          EOF
          sudo k8s enable network dns load-balancer local-storage
          sudo k8s set load-balancer.cidrs="10.0.0.2-10.0.0.10"
          sudo k8s status --wait-ready --timeout 5m
          mkdir -p ~/.kube
          sudo k8s config > ~/.kube/config

      - name: Setup Juju
        run: |
          sudo snap install juju --classic --channel="3.6/stable"
          mkdir -p ~/.local/share/juju/
          sudo k8s config > ~/.local/share/juju/credentials.yaml
          juju bootstrap k8s

      - name: Install UV and Tox
        run: |
          pipx uninstall tox
          sudo snap install astral-uv --classic
          uv tool install tox --with tox-uv --force

      - name: Enable Multus addon
        continue-on-error: true
        run: |
          sudo k8s kubectl apply -f https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/master/deployments/multus-daemonset-thick.yml
          sudo k8s kubectl -n kube-system rollout status daemonset/kube-multus-ds
          sudo k8s kubectl auth can-i create network-attachment-definitions

      - name: Run integration tests with Allure
        if: ${{ github.ref_name == 'main' }}
        run: tox -vve integration -- --alluredir allure-results

      - name: Run integration tests without Allure
        if: ${{ github.ref_name != 'main' }}
        run: tox -vve integration
      
      - name: Load test report history
        uses: actions/checkout@v4
        if: ${{ always() && github.ref_name == 'main' }}
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.12
        if: ${{ always() && github.ref_name == 'main' }}
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v4
        if: ${{ always() && github.ref_name == 'main' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Gather logs
        if: failure()
        run: |
          juju-crashdump -m sdcore
          juju-crashdump -m ran
          for pod in $(sudo k8s kubectl -n sdcore get pods -o json | jq .items[].metadata.name | tr -d '"'); do
            sudo k8s kubectl -n sdcore logs $pod --all-containers > sdcore-$pod.log
          done
          for pod in $(sudo k8s kubectl -n ran get pods -o json | jq .items[].metadata.name | tr -d '"'); do
            sudo k8s kubectl -n ran logs $pod --all-containers > ran-$pod.log
          done
          for pod in $(sudo k8s kubectl -n kube-system get pods -o json | jq .items[].metadata.name | tr -d '"'); do
            sudo k8s kubectl -n kube-system logs $pod --all-containers > kube-system-$pod.log
            sudo k8s kubectl -n kube-system describe pod $pod > kube-system-$pod.describe
          done

      - name: Archive juju crashdump
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: juju-crashdump
          path: juju-crashdump-*.tar.xz

      - name: Archive k8s logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: k8s-logs
          path: |
            sdcore-*.log
            ran-*.log
            kube-system-*.log
            kube-system-*.describe

      - name: Clean environment
        if: always()
        run: |
          juju destroy-model sdcore --force --destroy-storage --no-prompt | true
          juju destroy-model ran --force --destroy-storage --no-prompt | true
          juju destroy-model cos-lite --force --destroy-storage --no-prompt | true
          juju destroy-controller k8s --no-prompt --destroy-all-models --destroy-storage
